{"version":3,"sources":["utils.jsx","App.js","reportWebVitals.js","index.js"],"names":["window","location","origin","Firstname","isLoaded","first_name","Message","message","App","useState","data","setData","useEffect","Promise","resolve","reject","a","sharedData","document","getElementById","res","status","headers","includes","parser","DOMParser","doc","parseFromString","JSON","parse","textContent","then","console","log","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yRAMI,UAA2CA,OAAOC,SAASC,Q,YCoB/D,IAAMC,EAAY,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAC3B,OAAKD,EAEAC,EAEE,wCAAWA,KAFM,+CAFF,MAOpBC,EAAU,SAAC,GAA2B,IAAzBF,EAAwB,EAAxBA,SAAUG,EAAc,EAAdA,QACzB,OAAKH,EACE,8BAAMG,IADS,MAIXC,EAlCf,WACI,MAAwBC,mBAAS,CAAEL,UAAU,IAA7C,mBAAOM,EAAP,KAAaC,EAAb,KASA,OAPAC,qBAAU,WDCV,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,qBAAAC,EAAA,sDACJC,EAAaC,SAASC,eAAe,cADjC,uBAYAC,EAZA,kFAcOL,EAAO,EAAD,KAdb,WAiBCK,GAAsB,MAAfA,EAAIC,OAjBZ,0CAiBmCN,EAAO,YAjB1C,QAmBUK,EAAIE,QAAQ,gBAChBC,SAAS,UACTC,EAAS,IAAIC,UACbC,EAAMF,EAAOG,gBAAgBP,EAAIV,KAAM,aAC7CO,EAAaS,EAAIP,eAAe,eAvBhC,YA0BJF,EA1BI,0CA2BGH,EAAQc,KAAKC,MAAMZ,EAAWa,eA3BjC,iCA8BDf,EAAO,YA9BN,0DAAZ,yDCAoBgB,MAAK,SAACrB,GAClBsB,QAAQC,IAAIvB,GACZC,EAAQ,2BAAKD,GAAN,IAAYN,UAAU,UAElC,IAGC,qBAAK8B,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,uCACA,cAAC,EAAD,eAAexB,IACf,cAAC,EAAD,eAAaA,UCRdyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1BgB,M","file":"static/js/main.5a538c33.chunk.js","sourcesContent":["// client/src/utils.jsx\nimport axios from \"axios\";\n\nexport const IS_DEV = process.env.NODE_ENV !== \"production\";\n\nexport const DOMAIN =\n    process.env.NODE_ENV === \"production\" ? `${window.location.origin}` : `http://127.0.0.1:8000`;\n\nexport const getSharedData = () =>\n    new Promise(async (resolve, reject) => {\n        let sharedData = document.getElementById(\"sharedData\");\n\n        if (!sharedData && IS_DEV) {\n            // This will not run in production\n            console.log(`Getting page shared data in ${process.env.NODE_ENV} mode`);\n\n            const base = new URL(window.location.href);\n            const url = `${DOMAIN}${base.pathname}${base.search}`;\n\n            let res;\n            try {\n                res = await axios.get(`${url}`);\n            } catch (err) {\n                return reject(err);\n            }\n\n            if (!res || res.status !== 200) return reject(\"No data\");\n\n            const cType = res.headers[\"content-type\"];\n            if (cType.includes(\"text\")) {\n                const parser = new DOMParser();\n                const doc = parser.parseFromString(res.data, \"text/html\");\n                sharedData = doc.getElementById(\"sharedData\");\n            }\n        }\n        if (sharedData) {\n            return resolve(JSON.parse(sharedData.textContent));\n        }\n\n        return reject(\"No data\");\n    });\n","import { useEffect, useState } from \"react\";\nimport { getSharedData } from \"./utils\";\n\nimport \"./App.css\";\n\nfunction App() {\n    const [data, setData] = useState({ isLoaded: false });\n\n    useEffect(() => {\n        getSharedData().then((data) => {\n            console.log(data);\n            setData({ ...data, isLoaded: true });\n        });\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>Hello!</p>\n                <Firstname {...data} />\n                <Message {...data} />\n            </header>\n        </div>\n    );\n}\n\nconst Firstname = ({ isLoaded, first_name }) => {\n    if (!isLoaded) return null;\n\n    if (!first_name) return <div>Loading ....</div>;\n\n    return <div>I am {first_name}</div>;\n};\n\nconst Message = ({ isLoaded, message }) => {\n    if (!isLoaded) return null;\n    return <div>{message}</div>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}